{"version":3,"sources":["store.js","Join.js","Message.js","SystemMessage.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["initialState","socket","openSocket","username","room","currentRoomUsers","numberOfUsersInCurrentRoom","store","createStore","state","arguments","length","undefined","action","type","Object","objectSpread","data","Join","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","joinRoom","bind","assertThisInitialized","joinRandomRoom","_joinRoom","hash","document","querySelector","value","result","characters","charactersLength","i","charAt","Math","floor","random","randomHash","test","console","log","emit","on","msg","_JSON$parse","JSON","parse","users","numberOfUsers","dispatch","window","location","react_default","a","createElement","className","placeholder","id","onClick","Component","connect","Message","src","concat","alt","Date","timestamp","toLocaleString","message","SystemMessage","Chat","messages","usernameSuggestions","showUsernameSuggestions","selectedUsernameSuggestion","isModalOpen","pushMessageIntoList","pushSystemMessageIntoList","scrollToEndOfMessages","updateUsersList","onMessageChange","sendMessage","copyRoomName","onMessageKeyDown","Notification","requestPermission","getElementById","getElementsByClassName","userlist","newUserList","toLowerCase","setState","toString","messageListDiv","scrollTop","scrollHeight","msg_parsed","messagesLength","lastMessage","permission","RegExp","beeper","play","slice","e","preventDefault","stringify","roomHashDiv","select","execCommand","_this2","target","regexp","split","matchedUsernames","filter","uname","keyCode","shiftKey","_this3","react_beforeunload_lib","onBeforeunload","event","map","user","indx","key","react_transition_group","transitionName","transitionEnterTimeout","src_Message","assign","src_SystemMessage","suggestion","onSubmit","autoComplete","onChange","onKeyDown","defaultValue","App","react_router_dom","react_router","exact","path","render","routeProps","src_Join","src_Chat","React","Boolean","hostname","match","ReactDOM","es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d20f734.chunk.js","sourcesContent":["import { createStore } from 'redux';\nimport openSocket from 'socket.io-client';\n\nconst initialState = {\n    socket: openSocket(\"https://anonchat-backend.herokuapp.com/\"),\n    // socket: openSocket(\"http://localhost:3300\"),\n    username: \"\",\n    room: \"\",\n    currentRoomUsers: [],\n    numberOfUsersInCurrentRoom: 0,\n}\n\n/**\n * Reducer\n */\nfunction stateManager(state = initialState, action) {\n    switch (action.type) {\n        case 'SET_ROOM_DETAILS':\n            return ({\n                ...state,\n                ...action.data,\n            });\n        case 'UPDATE_USER_LIST':\n            return ({\n                ...state,\n                currentRoomUsers: action.data\n            })\n        default:\n            return state\n    }\n}\n\nlet store = createStore(stateManager);\n\nexport default store;","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport store from './store';\n\nfunction randomHash(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nclass Join extends Component {\n    constructor(props) {\n        super(props);\n\n        this.joinRoom = this.joinRoom.bind(this);\n        this.joinRandomRoom = this.joinRandomRoom.bind(this);\n        this._joinRoom = this._joinRoom.bind(this);\n    }\n\n    joinRoom() {\n        const hashInput = document.querySelector(\"#hash\");\n        const hash = hashInput.value;\n        this._joinRoom(hash);\n    }\n\n    joinRandomRoom() {\n        const hash = randomHash(64);\n        this._joinRoom(hash);\n    }\n\n    _joinRoom(hash) {\n        const isValidHash = hash.length && (/^[A-Za-z0-9]{64,}$/.test(hash));\n\n        if (!isValidHash) {\n            console.log(\"Error: Invalid hash!\");\n            return false;\n        } else {\n            console.log(\"Loading chat ...\");\n            this.props.socket.emit('join', hash);\n            this.props.socket.on('join-fail', function () {\n                console.log(\"Error: Invalid hash!\");\n            });\n\n            this.props.socket.on('join-ack', function (msg) {\n                const { room, username, users, numberOfUsers } = JSON.parse(msg);\n                store.dispatch({ type: 'SET_ROOM_DETAILS', data: {\n                    room, username, currentRoomUsers: users, numberOfUsersInCurrentRoom: numberOfUsers\n                } });\n                window.location.hash = \"/chat\"\n            });\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"fadein-right\">\n                <div className=\"join-page-container\">\n                    <h1>ANONCHAT.</h1>\n                    <div>\n                        <div>\n                            <input type=\"text\" className=\"join-input\" placeholder=\"room hash...\" id=\"hash\" />\n                            <button onClick={this.joinRoom} className=\"join-btn\">JOIN</button>\n                        </div>\n                        <br />\n                        or{\" \"}\n                        <a onClick={this.joinRandomRoom} className=\"special create-chat\">\n                            create chat\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n    return { ...state };\n};\n\nexport default connect(mapStateToProps)(Join);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport parse from 'html-react-parser';\n\nfunction Message(props) {\n    return (\n        <div className=\"message\">\n            <div className=\"pic\">\n                <img\n                    src={`http://www.gravatar.com/avatar/${props.username}?s=50&r=pg&d=identicon`}\n                    alt=\"user icon\"\n                />\n            </div>\n            <div className=\"message-content\">\n                <span className=\"sender-username\">{props.username}</span>{\" \"}\n                <span className=\"muted\">{new Date(props.timestamp).toLocaleString()}</span>\n                <p className=\"message-body\">\n                    {parse(props.message)}\n                </p>\n            </div>\n        </div>\n    );\n}\n\nMessage.propTypes = {\n    username: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n    timestamp: PropTypes.string.isRequired,\n}\n\nexport default Message;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SystemMessage(props) {\n    return (\n        <div className=\"message\">\n            <p className=\"muted italic\">{props.message}</p>\n        </div>\n    );\n}\n\nSystemMessage.propTypes = {\n    message: PropTypes.string.isRequired,\n    timestamp: PropTypes.string.isRequired,\n}\n\nexport default SystemMessage;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransitionGroup } from 'react-transition-group' // ES6\nimport { Beforeunload } from 'react-beforeunload';\n\nimport store from './store';\nimport Message from './Message';\nimport SystemMessage from './SystemMessage';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messages: [],\n      message: \"\",\n      usernameSuggestions: [],\n      showUsernameSuggestions: false,\n      selectedUsernameSuggestion: -1,\n      isModalOpen: false,\n    };\n\n    this.pushMessageIntoList = this.pushMessageIntoList.bind(this);\n    this.pushSystemMessageIntoList = this.pushSystemMessageIntoList.bind(this);\n    this.scrollToEndOfMessages = this.scrollToEndOfMessages.bind(this);\n    this.updateUsersList = this.updateUsersList.bind(this);\n    this.onMessageChange = this.onMessageChange.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.copyRoomName = this.copyRoomName.bind(this);\n    this.onMessageKeyDown = this.onMessageKeyDown.bind(this);\n  }\n\n  componentWillMount() {\n    if (!this.props || !this.props.room.length || !this.props.username.length)\n      window.location.hash = \"/\";\n  }\n\n  componentDidMount() {\n    Notification.requestPermission();\n\n    this.props.socket.on(\"user-message\", this.pushMessageIntoList);\n    this.props.socket.on(\"system-message\", this.pushSystemMessageIntoList);\n    this.props.socket.on(\"user-list-update\", this.updateUsersList);\n\n    const modal = document.getElementById(\"hash-share-modal\");\n    const btn = document.getElementById(\"myBtn\");\n    const span = document.getElementsByClassName(\"close\")[0];\n  }\n\n  updateUsersList(userlist) {\n    var newUserList = JSON.parse(userlist);\n    newUserList = newUserList.users || [];\n    store.dispatch({ type: \"UPDATE_USER_LIST\", data: newUserList });\n  }\n\n  pushSystemMessageIntoList(msg) {\n    if ((typeof msg).toLowerCase() !== \"string\" || !msg.length)\n        return false;\n\n    this.setState(\n      {\n        messages: this.state.messages.concat({\n          message: msg,\n          username: null,\n          timestamp: new Date().toString()\n        })\n      },\n      function() {\n        const messageListDiv = document.querySelector(\".message-list\");\n        messageListDiv.scrollTop = messageListDiv.scrollHeight;\n      }\n    );\n  }\n\n  scrollToEndOfMessages() {\n    const messageListDiv = document.querySelector(\".message-list\");\n    messageListDiv.scrollTop = messageListDiv.scrollHeight;\n  }\n\n  pushMessageIntoList(msg) {\n    var msg_parsed = JSON.parse(msg);\n    const messagesLength = this.state.messages.length;\n    const lastMessage = this.state.messages[messagesLength - 1];\n\n    // TODO: Clear out any malicious content from the msg_parsed here.\n    if (!msg_parsed.timestamp)\n      msg_parsed.timestamp = new Date().toString();\n\n    // show user a notification if his name is mentioned\n    if (Notification.permission && new RegExp(`\\@${this.props.username}`).test(msg_parsed.message)) {\n      new Notification(`${msg_parsed.username} has mentioned you in chat!`);\n      const beeper = document.querySelector(\"#beeper\");\n      if (beeper) { beeper.play(); }\n    }\n\n    if (\n      messagesLength &&\n      msg_parsed.username &&\n      lastMessage.username === msg_parsed.username\n    ) {\n      lastMessage.message += `<br/>${msg_parsed.message}`;\n      this.setState(\n        { messages: this.state.messages.slice(0, messagesLength - 1).concat(lastMessage) },\n        this.scrollToEndOfMessages\n      );\n    }\n    else {\n      this.setState(\n        { messages: this.state.messages.concat(msg_parsed) },\n        this.scrollToEndOfMessages\n      );\n    }\n  }\n\n  sendMessage(e) {\n    e.preventDefault();\n    const message = this.state.message;\n    if (!message || !message.length) return false;\n    this.props.socket.emit(\n      \"user-message\",\n      JSON.stringify({\n        message,\n        room: this.props.room\n      })\n    );\n    this.setState({ message: \"\" });\n  }\n\n  copyRoomName() {\n    const roomHashDiv = document.querySelector(\"#share-room-hash\");\n    if (!roomHashDiv) return false;\n    const roomName = this.props.room;\n    if (!roomName) return false;\n    roomHashDiv.select();\n    document.execCommand(\"copy\", true);\n    console.log(\"Copied!\");\n  }\n\n  onMessageChange(e) {\n    this.setState({ message: e.target.value }, () => {\n      if (this.state.showUsernameSuggestions) {\n        const regexp = `${this.state.message.split(\"@\")[1]}.*`;\n        const matchedUsernames = this.props.currentRoomUsers.filter(\n          uname =>\n            new RegExp(regexp, \"i\").test(uname) &&\n            uname !== this.props.username\n        );\n\n        matchedUsernames && matchedUsernames.length\n          ? this.setState({ usernameSuggestions: matchedUsernames, selectedUsernameSuggestion: 0 })\n          : this.setState({ showUsernameSuggestions: false }); // back to normal.\n      }\n    });\n  }\n\n  onMessageKeyDown(e) {\n    // @ is pressed\n    if (e.keyCode === 50 && e.shiftKey) {\n      this.setState({ showUsernameSuggestions: true }, this.showUsernameSuggestions);\n    }\n    // when usernames suggestions are being shown and TAB or ENTER is pressed.\n    else if (this.state.showUsernameSuggestions && (e.keyCode === 9 || e.keyCode === 13)) {\n      e.preventDefault();\n      this.setState({\n        message:\n          this.state.message.split(\"@\")[0] +\n          \"@\" +\n          this.state.usernameSuggestions[\n            this.state.selectedUsernameSuggestion\n          ],\n        showUsernameSuggestions: false,\n      });\n    }\n    // when usernames suggestions are being shown and UP arrow key is pressed.\n    else if (this.state.showUsernameSuggestions && e.keyCode === 38) {\n      e.preventDefault();\n      if (this.state.selectedUsernameSuggestion <= 0) {\n        return;\n      }\n      else {\n        this.setState({\n          selectedUsernameSuggestion:\n            this.state.selectedUsernameSuggestion - 1\n        });\n      }\n    }\n    // when usernames suggestions are being shown and DOWN arrow key is pressed.\n    else if (this.state.showUsernameSuggestions && e.keyCode === 40) {\n      e.preventDefault();\n      if (\n        this.state.selectedUsernameSuggestion >=\n        this.state.usernameSuggestions.length - 1\n      )\n      {\n        return;\n      }\n      else {\n        this.setState({\n          selectedUsernameSuggestion:\n            this.state.selectedUsernameSuggestion + 1\n        });\n      }\n    }\n    // space is pressed\n    else if (e.keyCode === 32) {\n      this.setState({ showUsernameSuggestions: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"fadein-right\">\n        <Beforeunload onBeforeunload={event => event.preventDefault()} />\n        <div className=\"chat-page-container\">\n          <div className=\"left-div\">\n            <div>\n              <h3 className=\"channel-literal\">CHANNEL</h3>\n              <br />\n              <span className=\"channel-name selected\">\n                #{this.props.room ? this.props.room.slice(0, 8) : null}\n                ...\n              </span>\n              <br />\n              <a\n                id=\"myBtn\"\n                onClick={() => this.setState({ isModalOpen: true })}\n                className=\"special\"\n              >\n                Invite a user\n              </a>\n            </div>\n            <br />\n            <br />\n\n            <div className=\"people\">\n              <h3 className=\"channel-literal\">PEOPLE</h3>\n              <br />\n              <div className=\"people-list\">\n                {this.props.currentRoomUsers\n                  ? this.props.currentRoomUsers.map((user, indx) => (\n                      <span key={indx} className={\"person\" + (user === this.props.username ? \" active\" : \"\")}>\n                        {user}\n                      </span>\n                    ))\n                  : null}\n              </div>\n            </div>\n          </div>\n          <div className=\"main-div\">\n            <div className=\"message-container\">\n              <div className=\"message-list\">\n                <CSSTransitionGroup\n                  transitionName=\"react-fadein\"\n                  transitionEnterTimeout={100}\n                >\n                  {this.state.messages\n                    ? this.state.messages.map((msg, indx) =>\n                        msg.username ? (\n                          <Message key={indx} {...msg} />\n                        ) : (\n                          <SystemMessage key={indx} {...msg} />\n                        )\n                      )\n                    : null}\n                </CSSTransitionGroup>\n              </div>\n            </div>\n            <div className=\"chat-bar\">\n              {this.state.showUsernameSuggestions &&\n              this.state.usernameSuggestions.length ? (\n                <div className=\"username-suggestions\">\n                  {this.state.usernameSuggestions.map(\n                    (suggestion, indx) => \n                      (<div className={ \"suggested-username\" + \" \" + (indx === this.state.selectedUsernameSuggestion ? \"active\" : \"\") } key={indx}>\n                        @{suggestion}\n                      </div>)\n                  )}\n                </div>\n              ) : null}\n              <div className=\"message-input\">\n                <form onSubmit={this.sendMessage}>\n                  <input\n                    type=\"text\"\n                    id=\"msg\"\n                    placeholder=\"Enter message and press enter...\"\n                    autoComplete=\"off\"\n                    onChange={this.onMessageChange}\n                    onKeyDown={this.onMessageKeyDown}\n                    value={this.state.message}\n                  />\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* ============ Modal =============*/}\n        <div\n          id=\"hash-share-modal\"\n          className={\n            \"modal\" + (this.state.isModalOpen ? \" modal-active\" : \"\")\n          }\n        >\n          <div className=\"modal-content\">\n            <span\n              className=\"close\"\n              onClick={() => this.setState({ isModalOpen: false })}\n            >\n              &times;\n            </span>\n\n            <p>\n              Note: Share the below hash to any user and ask them to input\n              at home page\n            </p>\n            <input\n              type=\"text\"\n              id=\"share-room-hash\"\n              defaultValue={this.props.room}\n            />\n            <button id=\"copy-btn\" onClick={this.copyRoomName}>\n              Copy\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n    return { ...state };\n};\n    \nexport default connect(mapStateToProps)(Chat);","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Join from './Join';\nimport Chat from './Chat';\n\nclass App extends React.Component {\n  render() {\n    return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" render={(routeProps) => (\n          <Join {...routeProps}/>\n        )} />\n        <Route exact path=\"/chat\" render={(routeProps) => (\n          <Chat {...routeProps}/>\n        )} />\n      </Switch>\n    </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}